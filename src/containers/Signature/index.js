import * as Examples from './examples';
import SignatureCrypto from './crypto';
import { useState, useEffect } from 'react';
import { useMantineTheme } from '@mantine/core';
import { CodeHighlight } from '@mantine/code-highlight';
import { Container, Title, Text, Tabs, Textarea } from '@mantine/core';
import { IconCertificate, IconBrandJavascript } from '@tabler/icons-react';
import styles from './index.module.scss';

import PageHeader from '../../components/PageHeader';
import Playground from '../../components/Playground';

const KEYS = [
    {
        id: 'key1',
        name: '–ö–ª—é—á 1',
    },
    {
        id: 'key2',
        name: '–ö–ª—é—á 2',
    },
];

const Signature = () => {
    const theme = useMantineTheme();
    const [ keys, setKeys ] = useState(null);
    const [ text, setText ] = useState('abc');
    const [ activePublicKey, setActivePublicKey ] = useState(null);
    const [ activePrivateKey, setActivePrivateKey ] = useState(null);
    const [ isValid, setIsValid ] = useState(false);
    const [ signature, setSignature ] = useState('');

    useEffect(() => {
        const load = async () => {
            let keys = [];
            for (let x of KEYS) {
                const keyPair = await SignatureCrypto.generateKeys();

                keys.push({
                    ...x,
                    id: `${x.id}-public`,
                    name: `${x.name} (–û—Ç–∫—Ä—ã—Ç—ã–π)`,
                    color: 'blue',
                    data: {
                        decryptionKey: x.id,
                        key: keyPair.publicKey,
                    },
                });

                keys.push({
                    ...x,
                    id: x.id,
                    name: `${x.name} (–ó–∞–∫—Ä—ã—Ç—ã–π)`,
                    color: 'red',
                    data: {
                        key: keyPair.privateKey,
                    },
                });
            }

            setKeys(keys);
        };

        if (keys === null) {
            load();
        }
    }, [ keys ]);

    useEffect(() => {
        const doAction = async (publicKey, privateKey) => {
            const signature = await SignatureCrypto.sign(privateKey, text);
            setSignature(signature);
            setIsValid(await SignatureCrypto.verify(publicKey, text, signature));
        };

        if (activePublicKey !==  null && activePrivateKey !== null) {
            doAction(activePublicKey.data.key, activePrivateKey.data.key);
        }
    }, [ text, activePublicKey, activePrivateKey ]);

    return (
        <Container>
            <PageHeader
                icon={<IconCertificate color={theme.colors['blue'][6]} size="81px" />}
                title="–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å"
            >
                –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å
                –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∑–∞–∫—Ä—ã—Ç—ã–º –∫–ª—é—á–æ–º.
            </PageHeader>
            <Title order={2}>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç?</Title>
            <Text>
                –ê–ª–≥–æ—Ä–∏—Ç–º —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ —Å—Ç–æ—Ä–æ–Ω–∞–º –≤–∞–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è,
                —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º —Å–≤—è–∑–∏ –Ω–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.

                –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –ê–ª–∏—Å–∞ —Ö–æ—á–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ë–æ–±–∞:
                <ul style={{ marginTop: 0 }}>
                    <li>–ê–ª–∏—Å–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É —Å–µ–±—è –ø–∞—Ä—É –∫–ª—é—á–µ–π: <span style={{ color: 'blue' }}><b>–æ—Ç–∫—Ä—ã—Ç—ã–π</b></span> –∏ <span style={{ color: 'red' }}><b>–∑–∞–∫—Ä—ã—Ç—ã–π</b></span></li>
                    <li>–ê–ª–∏—Å–∞ –ø—É–±–ª–∏–∫—É—é—Ç —Å–≤–æ–π <span style={{ color: 'blue' }}><b>–æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á</b></span> –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ</li>
                    <li>–ê–ª–∏—Å–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é <span style={{ color: 'red' }}><b>–∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞</b></span></li>
                    <li>–ê–ª–∏—Å–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–æ–±—É</li>
                    <li>–ë–æ–± –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ê–ª–∏—Å—ã —Å –ø–æ–º–æ—â—å—é –µ—ë <span style={{ color: 'blue' }}><b>–æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞</b></span></li>
                    <li>–ë–æ–± —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ</li>
                </ul>
            </Text>
            <Title order={2} style={{ marginTop: 12 }}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å</Title>
            {keys !== null && (
                <Playground
                    encryptionKey={null}
                    keys={keys}
                    onKey={async (key) => {
                        const type = key.id.endsWith('public') ? 'public' : 'private';
                        if (type === 'public') {
                            setActivePublicKey(key);
                        }

                        if (type === 'private') {
                            setActivePrivateKey(key);
                        }
                    }}
                >
                    <div>
                        <Text className={styles.blockTitle}>
                            –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                        </Text>
                        <Textarea
                            className={styles.blockText}
                            value={text}
                            onChange={(e) => setText(e.currentTarget.value)}
                        />
                        <div>üîì –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {activePublicKey !== null ? activePublicKey.name : '–ù–µ –≤—ã–±—Ä–∞–Ω'}</div>
                        <div>üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {activePrivateKey !== null ? activePrivateKey.name : '–ù–µ –≤—ã–±—Ä–∞–Ω'}</div>
                        <br/>
                        <div>–ü–æ–¥–ø–∏—Å—å: {signature.length > 32 ? signature.slice(0, 16) + '...' + signature.slice(-16) : signature}</div>
                        <div>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {isValid ? '‚úÖ' : '‚ùå'}</div>
                    </div>
                </Playground>
            )}
            <Title order={2} style={{ marginTop: 12 }}>–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞</Title>
            <Tabs
                mt={12}
                pb={24}
                defaultValue="js"
                orientation="vertical"
            >
                <Tabs.List>
                    <Tabs.Tab
                        value="js"
                        leftSection={
                            <IconBrandJavascript
                                width={12}
                                height={12}
                            />
                        }
                    >
                        JavaScript
                    </Tabs.Tab>
                </Tabs.List>
                <Tabs.Panel value="js">
                    <CodeHighlight
                        code={Examples.JS_EXAMPLE}
                        language="tsx"
                    />
                </Tabs.Panel>
            </Tabs>
        </Container>
    );
};

export default Signature;
