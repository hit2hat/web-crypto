import * as Examples from './examples';
import DiffieHellmanCrypto from './crypto';
import { useState, useEffect } from 'react';
import { useMantineTheme } from '@mantine/core';
import { CodeHighlight } from '@mantine/code-highlight';
import { Container, Title, Text, Tabs } from '@mantine/core';
import { IconCloudLock, IconBrandJavascript } from '@tabler/icons-react';

import PageHeader from '../../components/PageHeader';
import Playground from '../../components/Playground';

const KEYS = [
    {
        id: 'key1',
        name: '–ö–ª—é—á 1',
    },
    {
        id: 'key2',
        name: '–ö–ª—é—á 2',
    },
    {
        id: 'key3',
        name: '–ö–ª—é—á 3',
    },
];

const DiffieHellman = () => {
    const theme = useMantineTheme();
    const [ keys, setKeys ] = useState(null);
    const [ activePublicKey, setActivePublicKey ] = useState(null);
    const [ activePrivateKey, setActivePrivateKey ] = useState(null);
    const [ sharedSecret, setSharedSecret ] = useState(null);

    useEffect(() => {
        const load = async () => {
            let keys = [];
            for (let x of KEYS) {
                const keyPair = await DiffieHellmanCrypto.generateKeys();

                keys.push({
                    ...x,
                    id: `${x.id}-public`,
                    name: `${x.name} (–û—Ç–∫—Ä—ã—Ç—ã–π)`,
                    color: 'blue',
                    data: {
                        decryptionKey: x.id,
                        key: keyPair.publicKey,
                    },
                });

                keys.push({
                    ...x,
                    id: x.id,
                    name: `${x.name} (–ó–∞–∫—Ä—ã—Ç—ã–π)`,
                    color: 'red',
                    data: {
                        key: keyPair.privateKey,
                    },
                });
            }

            setKeys(keys);
        };

        if (keys === null) {
            load();
        }
    }, [ keys ]);

    useEffect(() => {
        const derive = async (publicKey, privateKey) => {
            setSharedSecret(await DiffieHellmanCrypto.derive(publicKey, privateKey));
        };

        if (activePublicKey !==  null && activePrivateKey !== null) {
            if (activePublicKey.data.decryptionKey !== activePrivateKey.id) {
                derive(activePublicKey.data.key, activePrivateKey.data.key);
            } else {
                setSharedSecret('‚ùå –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–ª—é—á–∏');
            }
        }
    }, [ activePublicKey, activePrivateKey ]);

    return (
        <Container>
            <PageHeader
                icon={<IconCloudLock color={theme.colors['blue'][6]} size="81px" />}
                title="–û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏"
            >
                –û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ ‚Äî —ç—Ç–æ —Å–µ–º–µ–π—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏—Ö –¥–≤—É–º –∏ –±–æ–ª–µ–µ —Å—Ç–æ—Ä–æ–Ω–∞–º
                –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–∑–∞—â–∏—â—ë–Ω–Ω—ã–π –æ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏.
            </PageHeader>
            <Title order={2}>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç?</Title>
            <Text>
                –û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ
                –∫–ª—é—á–∞ –¥–≤—É–º –∏ –±–æ–ª–µ–µ —Å—Ç–æ—Ä–æ–Ω–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏.<br/><br/>

                –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –ê–ª–∏—Å–∞ —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –∫–ª—é—á —Å –ë–æ–±–æ–º:
                <ul style={{ marginTop: 0 }}>
                    <li>–ê–ª–∏—Å–∞ –∏ –ë–æ–± –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —É —Å–µ–±—è –ø–∞—Ä—É –∫–ª—é—á–µ–π: <span style={{ color: 'blue' }}><b>–æ—Ç–∫—Ä—ã—Ç—ã–π</b></span> –∏ <span style={{ color: 'red' }}><b>–∑–∞–∫—Ä—ã—Ç—ã–π</b></span></li>
                    <li>–ê–ª–∏—Å–∞ –∏ –ë–æ–± –ø—É–±–ª–∏–∫—É—é—Ç —Å–≤–æ–π <span style={{ color: 'blue' }}><b>–æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á</b></span> –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ</li>
                    <li>–ê–ª–∏—Å–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è <span style={{ color: 'blue' }}><b>–æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞ –ë–æ–±–∞</b></span> –∏ <span style={{ color: 'red' }}><b>—Å–≤–æ–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞</b></span></li>
                    <li>–ë–æ–± –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è <span style={{ color: 'blue' }}><b>–æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞ –ê–ª–∏—Å—ã</b></span> –∏ <span style={{ color: 'red' }}><b>—Å–≤–æ–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞</b></span></li>
                    <li>–ê–ª–∏—Å–∞ –∏ –ë–æ–± –∏–º–µ—é—Ç –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç</li>
                </ul>
            </Text>
            <Title order={2} style={{ marginTop: 12 }}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å</Title>
            {keys !== null && (
                <Playground
                    encryptionKey={null}
                    keys={keys}
                    onKey={async (key) => {
                        const type = key.id.endsWith('public') ? 'public' : 'private';
                        if (type === 'public') {
                            setActivePublicKey(key);
                        }

                        if (type === 'private') {
                            setActivePrivateKey(key);
                        }
                    }}
                >
                    <div>
                        <div>üîì –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {activePublicKey !== null ? activePublicKey.name : '–ù–µ –≤—ã–±—Ä–∞–Ω'}</div>
                        <div>üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {activePrivateKey !== null ? activePrivateKey.name : '–ù–µ –≤—ã–±—Ä–∞–Ω'}</div>
                        <br/>
                        <div>–û–±—â–∏–π —Å–µ–∫—Ä–µ—Ç: {sharedSecret !== null ? sharedSecret : '–ù–µ—Ç'}</div>
                    </div>
                </Playground>
            )}
            <Title order={2} style={{ marginTop: 12 }}>–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞</Title>
            <Tabs
                mt={12}
                pb={24}
                defaultValue="js"
                orientation="vertical"
            >
                <Tabs.List>
                    <Tabs.Tab
                        value="js"
                        leftSection={
                            <IconBrandJavascript
                                width={12}
                                height={12}
                            />
                        }
                    >
                        JavaScript
                    </Tabs.Tab>
                </Tabs.List>
                <Tabs.Panel value="js">
                    <CodeHighlight
                        code={Examples.JS_EXAMPLE}
                        language="tsx"
                    />
                </Tabs.Panel>
            </Tabs>
        </Container>
    );
};

export default DiffieHellman;
